// We need to import the CSS so that webpack will load it.
// The MiniCssExtractPlugin is used to separate it out into
// its own CSS file.
import 'virtual:windi.css'
import './app.css'
import 'react-datepicker/dist/react-datepicker.css'
import { renderMedicalRecordView } from '~/containers/MedicalRecordView'
import { renderMedicalRecordForm } from '~/containers/MedicalRecordForm'
import { renderCategoryEditForm } from '~/containers/CategoryEditForm'
import { renderDoctorEditForm } from '~/containers/DoctorEditForm'
import copy from 'copy-text-to-clipboard'

// import { renderApp } from './entry'

// webpack automatically bundles all modules in your
// entry points. Those entry points can be configured
// in "webpack.config.js".
//
// Import deps with the dep name or local files with a relative path, for example:
//
//     import {Socket} from "phoenix"
//     import socket from "./socket"
//
import 'phoenix_html'
import { Socket } from 'phoenix'
import topbar from 'topbar'
import { LiveSocket, ViewHook } from 'phoenix_live_view'

declare global {
  interface Window {
    loginWithFacebook: () => void
    liveSocket: any
    bindCopyToClipboard: (button: HTMLButtonElement, text: string) => void
  }
}
let csrfToken = document
  .querySelector("meta[name='csrf-token']")
  ?.getAttribute('content')

let liveSocket = new LiveSocket('/live', Socket, {
  params: { _csrf_token: csrfToken },
  hooks: {
    MedicalRecordForm: {
      mounted(this: ViewHook) {
        this.pushEvent('load_entity', {}, ({ entity }) => {
          renderMedicalRecordForm(this, { category: entity })
        })
      },
    },
    MedicalRecordView: {
      mounted(this: ViewHook) {
        this.pushEvent('load_entity', {}, ({ entity }) => {
          renderMedicalRecordView(this, { entity })
        })
      },
    },
    DoctorEditForm: {
      mounted(this: ViewHook) {
        this.pushEvent('load_entity', {}, ({ entity, categories, users }) => {
          renderDoctorEditForm(this, { entity, categories, users })
        })
      },
    },
    CategoryEditForm: {
      mounted(this: ViewHook) {
        this.pushEvent('load_entity', {}, ({ entity }) => {
          renderCategoryEditForm(this, { entity })
        })
      },
    },
    CopyToClipboard: {
      mounted(this: ViewHook) {
        const link = this.el.dataset['link']
        this.el.addEventListener('click', () => {
          if (link) {
            copy(link)
            alert('Đã copy đường dẫn!')
          }
        })
      },
    },
  },
})

// Show progress bar on live navigation and form submits
topbar.config({ barColors: { 0: '#29d' }, shadowColor: 'rgba(0, 0, 0, .3)' })
window.addEventListener('phx:page-loading-start', (info) => topbar.show())
window.addEventListener('phx:page-loading-stop', (info) => topbar.hide())

// connect if there are any LiveViews on the page
liveSocket.connect()

// expose liveSocket on window for web console debug logs and latency simulation:
// >> liveSocket.enableDebug()
// >> liveSocket.enableLatencySim(1000)  // enabled for duration of browser session
// >> liveSocket.disableLatencySim()
window.liveSocket = liveSocket

window.loginWithFacebook = () => {
  FB.init({
    appId: '573366700506831',
    cookie: true,
    xfbml: true,
    version: 'v11.0',
  })

  FB.login((response) => {
    console.log(response)
    const form = document.getElementById('facebook-login') as HTMLFormElement
    const tokenInput = form.querySelector(
      // '[name=access_token]',
      '[name="user[access_token]"]', // Form generated by Surface
    ) as HTMLInputElement
    tokenInput.value = response.authResponse.accessToken
    form.submit()

    /*
    const token = document
      .querySelector('[name="csrf-token"]')
      ?.getAttribute('content')
    if (!token) {
      throw new Error('Cannot get token')
    }
    const { json } = await fetch(`/auth/facebook`, {
      headers: {
        accept: 'application/json',
        'content-type': 'application/json',
        'x-csrf-token': token,
      },
      credentials: 'same-origin',
      method: 'POST',
      body: JSON.stringify({ accessToken: authResponse.accessToken }),
    })
    */
  })
}
